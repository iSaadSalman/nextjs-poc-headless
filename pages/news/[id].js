import { Nav } from "../../components/Nav";
import { Footer } from "../../components/Footer";
import Head from "next/head";
import { ApolloClient, InMemoryCache, gql } from "@apollo/client";
import { graphQLUrl } from "../../functions/functions";
import moment from "moment";

export default function DynamicPage({ data }) {
    console.log( data )
    return (<>
          <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main>
        <div className="antialiased text-gray-800 dark:bg-black dark:text-gray-400 flex flex-col min-h-screen">
          <div className="grow">
          <div className="container px-8 py-5 lg:py-8 mx-auto xl:px-5 max-w-screen-lg">
              {Nav()}
            </div>

            <div>
              <div className="container px-8 py-5 lg:py-8 mx-auto xl:px-5 max-w-screen-lg">
                <div className="grid gap-10 lg:gap-10 md:grid-cols-2 ">
    
          
                </div>

                <img
              alt="Thumbnail"
              src={data.entry.image.src}
              decoding="async"
              data-nimg="fill"
              className="transition-all"
              sizes="80vw"
            />
                <h2 className=" mt-10  text-4xl text-white">{data.entry.title}</h2>
                <h3 className=" mt-10  text-2xl text-white"> {moment(data.entry.date).calendar()}</h3>
                <div dangerouslySetInnerHTML={{__html:data.entry.description}} className=" mt-5 text-white"></div>
                </div>
            </div>
            </div>
        </div>
        </main>
    </>);
}

export async function getStaticProps({ params }) {
    const client = new ApolloClient({
        uri: graphQLUrl(),
        cache: new InMemoryCache(),
      });
    
      const { data } = await client.query({
        query: gql`
        query Single {
            entry(slug: "${params.id}") {
              id
              title
              slug
              ... on Entry_News_News {
                category {
                          value
                        }
                        image {
                          url
                          permalink
                          src(width: 700, height: 357)
                        }
                        description
                        date
              }
            }
          }
          `,
      });
    
      return {
        props: {
          data: data,
        },
      };
}

export async function getStaticPaths() {
    return {
        paths: [
        //   {
        //   'params': {id: 'white-box-available'},
        //   'params': {id: 'test'},
        // }
      ],
        fallback: 'blocking' // false or 'blocking'
      };

}
