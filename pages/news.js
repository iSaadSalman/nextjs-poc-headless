import { ApolloClient, InMemoryCache, gql } from "@apollo/client";
import Head from "next/head";
import Image from "next/image";
import moment from "moment";
import { Inter } from "next/font/google";
import styles from "@/styles/Home.module.css";
import { Nav } from "../components/Nav";
import { Footer } from "../components/Footer";
import { useState } from "react";
import  Pagination  from "../components/Pagination";

const inter = Inter({ subsets: ["latin"] });

import { graphQLUrl } from "../functions/functions";

export default function Home({ data }) {

  const [currentPage, setCurrentPage] = useState(1);
  const pageSize = 3;


  const paginatedPosts = paginate(data.news.data, currentPage, pageSize);

 
  const onPageChange = (page) => {

    console.log( page )
    setCurrentPage(page);
  };

  // console.log( data.news.data[0].image.src)
  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <div className="antialiased text-gray-800 dark:bg-black dark:text-gray-400 flex flex-col min-h-screen">
          <div className="grow">
            <div className="container px-8 py-5 lg:py-8 mx-auto xl:px-5 max-w-screen-lg">
              {Nav()}
            </div>
            <div>
              <div className="container px-8 py-5 lg:py-8 mx-auto xl:px-5 max-w-screen-lg">
                <div className="grid gap-10 lg:gap-10 md:grid-cols-2 ">
    
          
                </div>
                <h2 className=" mt-10 text-center text-4xl text-white">News</h2>

                <div className="grid gap-10 mt-10 lg:gap-10 md:grid-cols-2 xl:grid-cols-3 border-t border-gray-100 dark:border-gray-800 pt-10">
                  { paginatedPosts.map((n) => (
                    <NewsItem news={n} />
                  ))}
                </div>
                  
                <Pagination items={data.news.data.length}  currentPage={currentPage}  pageSize={pageSize}  onPageChange={onPageChange} />
              </div>
            </div>
          </div>
          {Footer()}
        </div>
      </main>
    </>
  );
}

function NewsItem(newsItem) {
  return (
    <div className="cursor-pointer group">
      <div className="relative overflow-hidden transition-all bg-gray-100 rounded-md dark:bg-gray-800   hover:scale-105 aspect-square">
        <a href={`news/${newsItem.news.slug}`}>
          <span>
            <img
              alt="Thumbnail"
              src={newsItem.news.image.src}
              decoding="async"
              data-nimg="fill"
              className="transition-all"
              sizes="80vw"
            />
            <noscript />
          </span>
        </a>
      </div>
      <div className="flex gap-3">
        <a href="/#">
          <span className="inline-block mt-5 text-xs font-medium tracking-wider uppercase  text-blue-600">
            {newsItem.news.category.value}
          </span>
        </a>
      </div>
      <h2 className="mt-2 text-lg font-semibold tracking-normal text-brand-primary dark:text-white">
        <span className=" bg-gradient-to-r from-green-200 to-green-100 dark:from-purple-800 dark:to-purple-900 bg-[length:0px_10px] bg-left-bottom bg-no-repeat transition-[background-size] duration-500 hover:bg-[length:100%_3px] group-hover:bg-[length:100%_10px]">
          {newsItem.news.title}
        </span>
      </h2>

      <div className="flex items-center mt-3 space-x-3 text-gray-500 dark:text-gray-400">
        <time className="text-sm">
          {/* {newsItem.news.date} */}
          {moment(newsItem.news.date).calendar()}
        </time>
      </div>
    </div>
  );
}

export async function getStaticProps(prop) {
  const client = new ApolloClient({
    uri: graphQLUrl(),
    cache: new InMemoryCache(),
  });

  const { data } = await client.query({
    query: gql`
      query home {
        entry(id: "home") {
          id
          title
          ... on Entry_Pages_Home {
            video_title
            hero_video {
              url
              permalink
              src(width: 472, height: 277)
            }
            image_title
            hero_image {
              url
              permalink
              src(width: 472, height: 277)
            }
          }
        }
        news: entries(collection: "news", limit: 12) {
          total
          current_page
          per_page
          data {
            title
            ... on Entry_News_News {
              slug
              title
              category {
                value
              }
              image {
                url
                permalink
                src(width: 301, height: 357)
              }
              description
              date
            }
          }
        }
      }
    `,
  });

  return {
    props: {
      data: data,
    },
  };
}



export const paginate = (items, pageNumber, pageSize) => {
  const startIndex = (pageNumber - 1) * pageSize;
  return items.slice(startIndex, startIndex + pageSize);
 };